// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourGuide.Persistance.Context;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241022084638_countryTableMig")]
    partial class countryTableMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Automotive",
                            CreatedDate = new DateTime(2022, 11, 10, 4, 5, 22, 847, DateTimeKind.Local).AddTicks(2993),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Tools",
                            CreatedDate = new DateTime(2023, 3, 7, 19, 35, 41, 622, DateTimeKind.Local).AddTicks(4818),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Kids",
                            CreatedDate = new DateTime(2023, 8, 6, 10, 3, 17, 239, DateTimeKind.Local).AddTicks(3257),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Clothing",
                            CreatedDate = new DateTime(2023, 12, 11, 17, 30, 44, 29, DateTimeKind.Local).AddTicks(9551),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Computers",
                            CreatedDate = new DateTime(2024, 8, 1, 9, 41, 33, 334, DateTimeKind.Local).AddTicks(1319),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(4457),
                            Description = "Iure expedita minus harum nostrum alias. Aperiam perspiciatis omnis autem eos voluptatem consectetur. Dolor excepturi est facilis. Facere dolore et eos nulla hic. Omnis dolorem qui voluptas dolore nemo assumenda et eum ut.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/783.jpg",
                            IsDeleted = false,
                            Latitude = 7.6904000000000003,
                            Location = "749 Everardo Centers, Andreaneshire, Venezuela",
                            Longitude = -67.244600000000005,
                            Name = "Langoshstad",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 75.03m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(6408),
                            Description = "Et velit omnis. Asperiores corporis quia est quasi molestiae voluptas molestiae laboriosam. Qui magnam commodi minus.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1207.jpg",
                            IsDeleted = false,
                            Latitude = 5.1228999999999996,
                            Location = "133 Dicki Circles, North Elzamouth, French Guiana",
                            Longitude = 69.493700000000004,
                            Name = "Coletown",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 6.23m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(6752),
                            Description = "Accusamus nesciunt velit. Cum placeat ipsa ut fuga rem labore quo molestiae quasi. Minus aspernatur rem. Non ratione qui et modi est. Cumque rem totam fugit sit deleniti. Eveniet sunt iste amet et ex maiores.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/42.jpg",
                            IsDeleted = false,
                            Latitude = 86.739900000000006,
                            Location = "44468 Dedrick Well, South Annietown, Bouvet Island (Bouvetoya)",
                            Longitude = -71.329999999999998,
                            Name = "Pascalehaven",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 21.61m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(7005),
                            Description = "Tempore hic ea cumque dolorem tempore. Aut quaerat est et laboriosam. Possimus aut quia ipsam nisi fugiat rem dolor. Consequuntur aliquid qui et excepturi voluptatem et rerum sunt vel. Libero sit voluptas consequatur veniam. Eos est sit porro id harum.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/974.jpg",
                            IsDeleted = false,
                            Latitude = -26.418099999999999,
                            Location = "83038 Champlin Courts, Shermanton, Syrian Arab Republic",
                            Longitude = -12.806100000000001,
                            Name = "Gregoryborough",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            TicketPrice = 40.11m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(7237),
                            Description = "Nam temporibus sunt laborum quis maxime accusantium. Incidunt iusto ipsum et ipsam aut culpa laudantium pariatur. Aperiam eligendi amet ex. Delectus eum dolore ut itaque consequuntur et.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/254.jpg",
                            IsDeleted = false,
                            Latitude = 7.6527000000000003,
                            Location = "27963 Keeling Mountain, Jaspermouth, Algeria",
                            Longitude = 59.141100000000002,
                            Name = "East Melody",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 51.47m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(7536),
                            Description = "At ipsam est laborum commodi asperiores nesciunt sit. Non error corporis aut. Doloremque porro et facere quidem voluptatem expedita cum suscipit. Sit aut atque voluptate placeat. Est repudiandae sed qui ut voluptatem in atque eveniet dolores. Excepturi accusamus consectetur.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/188.jpg",
                            IsDeleted = false,
                            Latitude = -80.749099999999999,
                            Location = "4791 Nikki Shoals, Jakeport, Algeria",
                            Longitude = 53.700400000000002,
                            Name = "Lake Dewayneberg",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 68.19m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(7828),
                            Description = "Voluptatum sit aut quaerat. Deleniti voluptatem qui repudiandae vel quasi sunt nihil. Repellendus nihil nisi quas dolor et et qui maxime. Esse ad sed blanditiis sit. Impedit corrupti saepe quam facilis.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/469.jpg",
                            IsDeleted = false,
                            Latitude = 3.4855999999999998,
                            Location = "502 Eli Heights, Shayneview, United States of America",
                            Longitude = 115.086,
                            Name = "Lake Bransonstad",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 37.16m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(8047),
                            Description = "Modi nemo quo non est. Temporibus nulla dolore mollitia autem cum et deleniti est. Rerum temporibus amet nobis possimus laborum. Et numquam eum velit et sapiente minus.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1153.jpg",
                            IsDeleted = false,
                            Latitude = 18.040199999999999,
                            Location = "289 Schulist Fork, Lake Dessiefort, Dominica",
                            Longitude = -104.0581,
                            Name = "North Pascale",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            TicketPrice = 51.44m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(8237),
                            Description = "Officiis occaecati quia id. Officia odit et asperiores et consequatur corporis. Alias rerum eos velit hic molestias blanditiis. Ipsa consequuntur incidunt et nulla. Est asperiores et vero enim fugiat nesciunt quas ad. Tempora iste a ut et sunt ex quae praesentium.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/467.jpg",
                            IsDeleted = false,
                            Latitude = -83.494500000000002,
                            Location = "964 Willms Keys, Lake Jimmy, Belgium",
                            Longitude = -119.3754,
                            Name = "Filomenamouth",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            TicketPrice = 84.48m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 22, 11, 46, 38, 318, DateTimeKind.Local).AddTicks(8512),
                            Description = "Corporis aut qui dolor beatae. Molestiae dolorum cumque quidem quia et officiis voluptas ipsam voluptas. Dolore quibusdam autem quia in unde voluptates molestias. Debitis eligendi et laudantium ut fugit ea atque quas illo. Optio iusto consequatur.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/791.jpg",
                            IsDeleted = false,
                            Latitude = 16.572399999999998,
                            Location = "263 Roberta Valley, Adalbertoton, Palestinian Territory",
                            Longitude = 78.585800000000006,
                            Name = "New Scottyfurt",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 49.78m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.DestinationAddress", b =>
                {
                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("DestinationId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("DestinationAddresses");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Destinations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Address", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.DestinationAddress", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Country", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
