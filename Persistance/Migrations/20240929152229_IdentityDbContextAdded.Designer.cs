// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourGuide.Persistance.Context;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240929152229_IdentityDbContextAdded")]
    partial class IdentityDbContextAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Sports",
                            CreatedDate = new DateTime(2023, 4, 27, 16, 56, 8, 588, DateTimeKind.Local).AddTicks(9540),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Beauty",
                            CreatedDate = new DateTime(2024, 2, 6, 16, 27, 7, 855, DateTimeKind.Local).AddTicks(4782),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2023, 4, 5, 16, 40, 33, 288, DateTimeKind.Local).AddTicks(6903),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2023, 4, 30, 19, 17, 42, 783, DateTimeKind.Local).AddTicks(2802),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Baby",
                            CreatedDate = new DateTime(2023, 4, 4, 8, 4, 12, 793, DateTimeKind.Local).AddTicks(8959),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 491, DateTimeKind.Local).AddTicks(2618),
                            Description = "Delectus vero accusantium suscipit id. Dolor saepe hic aut. Sed qui labore qui. Voluptatem dolorem magni.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/189.jpg",
                            IsDeleted = false,
                            Latitude = -70.805999999999997,
                            Location = "27330 Funk Harbor, North Nickolasborough, Indonesia",
                            Longitude = -55.874299999999998,
                            Name = "New Benton",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 25.93m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 491, DateTimeKind.Local).AddTicks(7064),
                            Description = "Ullam autem eum amet qui. Doloremque libero repellendus. Porro nihil corporis deserunt. Cupiditate sapiente aperiam saepe consequatur qui vitae eos. Quae consequatur dolores ut voluptas et sapiente aspernatur. Omnis eos corporis quod nihil voluptas ratione.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/695.jpg",
                            IsDeleted = false,
                            Latitude = -72.499700000000004,
                            Location = "215 Quentin Loaf, Unabury, Iceland",
                            Longitude = 27.407800000000002,
                            Name = "East Bernardbury",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 75.53m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 491, DateTimeKind.Local).AddTicks(7890),
                            Description = "Laborum possimus atque ducimus enim qui veniam aut qui eveniet. Placeat aut ut alias id. Dolorem fugit consectetur numquam voluptate qui sed reprehenderit quis. Soluta sit culpa quia unde est libero quia omnis eius.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/629.jpg",
                            IsDeleted = false,
                            Latitude = 77.161699999999996,
                            Location = "458 Skye Viaduct, Stammfurt, Palestinian Territory",
                            Longitude = -65.3874,
                            Name = "Jensenborough",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 80.90m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 491, DateTimeKind.Local).AddTicks(8311),
                            Description = "Ut ipsum deserunt aperiam at laudantium magni. Corrupti laboriosam aut qui velit occaecati. Quod dignissimos eum expedita perspiciatis nemo dolore. Ut omnis adipisci beatae quo fugit natus accusamus. Voluptas et voluptate modi perferendis. Aliquid voluptatem hic quis et quisquam dolor officia adipisci cupiditate.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/289.jpg",
                            IsDeleted = false,
                            Latitude = -68.506200000000007,
                            Location = "375 Cicero Parkway, East Aniya, Nauru",
                            Longitude = -143.35239999999999,
                            Name = "East Jonchester",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 22.11m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 491, DateTimeKind.Local).AddTicks(8768),
                            Description = "Sint qui fugiat. Non exercitationem aspernatur voluptatibus perspiciatis natus cum ratione alias. Laboriosam atque nesciunt est totam.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/922.jpg",
                            IsDeleted = false,
                            Latitude = 47.649999999999999,
                            Location = "870 Morar Villages, East Madyson, Turkey",
                            Longitude = 100.9286,
                            Name = "West Hansmouth",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 63.75m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 491, DateTimeKind.Local).AddTicks(9048),
                            Description = "Voluptatem eos rerum accusamus. Omnis optio dolor neque aut. Quisquam neque et labore dolore unde voluptatem ut numquam ut. Nisi dolorem recusandae qui molestiae occaecati nihil porro dolorem. Non quae cum possimus amet sint nostrum.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/667.jpg",
                            IsDeleted = false,
                            Latitude = 51.094499999999996,
                            Location = "84974 Reynold Courts, West Bobbyview, Isle of Man",
                            Longitude = 21.2758,
                            Name = "Bogisichburgh",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 58.90m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 491, DateTimeKind.Local).AddTicks(9435),
                            Description = "Ut labore quam. In voluptatibus voluptas consequatur sequi illo placeat qui. Est sed quidem. Rerum qui doloribus ad amet unde.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/516.jpg",
                            IsDeleted = false,
                            Latitude = 45.0486,
                            Location = "8964 Kilback Crossroad, North Antwon, Russian Federation",
                            Longitude = -78.163799999999995,
                            Name = "Dennisfort",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 19.34m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 491, DateTimeKind.Local).AddTicks(9747),
                            Description = "Voluptas ut ad laboriosam et. Quis dolor eos et sint quidem voluptatem qui. Earum iste vero debitis error sed eaque cupiditate accusamus mollitia. Earum vitae quae. Et dolor vero possimus omnis aperiam consequatur voluptatem aspernatur. Recusandae qui quia dolor modi atque.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/109.jpg",
                            IsDeleted = false,
                            Latitude = 43.630699999999997,
                            Location = "67772 Garnet Plaza, Mavericktown, Latvia",
                            Longitude = 4.0948000000000002,
                            Name = "Jackyborough",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 85.08m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 492, DateTimeKind.Local).AddTicks(150),
                            Description = "Fugit adipisci atque voluptas nisi ut aperiam similique iusto. Ut nemo occaecati. Ut autem voluptatibus inventore quos qui. Quo et aut totam sed impedit laborum voluptatem repellendus quo. Amet quia aperiam consectetur.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/347.jpg",
                            IsDeleted = false,
                            Latitude = -72.380300000000005,
                            Location = "741 Durward Summit, West Elveraport, Panama",
                            Longitude = 178.68440000000001,
                            Name = "Robelfort",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 99.16m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 9, 29, 18, 22, 28, 492, DateTimeKind.Local).AddTicks(610),
                            Description = "Rerum minima quia placeat sint. Necessitatibus et voluptatum aut ratione repellat sint accusantium eius. Id et et delectus doloribus magni ea. Aut maiores voluptas. Iusto quaerat quos ullam natus est autem.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/370.jpg",
                            IsDeleted = false,
                            Latitude = -44.7562,
                            Location = "737 Burnice Turnpike, Lake Elisabeth, Mauritius",
                            Longitude = -91.150000000000006,
                            Name = "East Haskellberg",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            TicketPrice = 78.12m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Destinations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Destinations");
                });
#pragma warning restore 612, 618
        }
    }
}
