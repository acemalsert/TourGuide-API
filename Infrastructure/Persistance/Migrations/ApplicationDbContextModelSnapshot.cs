// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourGuide.Persistance.Context;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Kids",
                            CreatedDate = new DateTime(2022, 12, 29, 6, 4, 12, 816, DateTimeKind.Local).AddTicks(1671),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Industrial",
                            CreatedDate = new DateTime(2024, 2, 9, 17, 30, 44, 513, DateTimeKind.Local).AddTicks(8988),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Baby",
                            CreatedDate = new DateTime(2023, 10, 23, 4, 53, 40, 585, DateTimeKind.Local).AddTicks(1422),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Automotive",
                            CreatedDate = new DateTime(2023, 11, 13, 10, 28, 36, 223, DateTimeKind.Local).AddTicks(1434),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Jewelery",
                            CreatedDate = new DateTime(2023, 4, 1, 12, 50, 37, 239, DateTimeKind.Local).AddTicks(9857),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            ClosingTime = new DateTime(2024, 11, 24, 17, 19, 0, 97, DateTimeKind.Local).AddTicks(4963),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 161, DateTimeKind.Local).AddTicks(8767),
                            Description = "Quis ab quae ut assumenda non repellat non. Sed ratione enim animi voluptas mollitia. Non dolorem soluta deleniti repellat.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/430.jpg",
                            IsDeleted = false,
                            Name = "Riceberg",
                            OpeningTime = new DateTime(2024, 11, 24, 9, 19, 31, 11, DateTimeKind.Local).AddTicks(8335),
                            TicketPrice = 95.78m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            ClosingTime = new DateTime(2024, 11, 24, 18, 35, 15, 37, DateTimeKind.Local).AddTicks(3117),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(1434),
                            Description = "Quia quasi quibusdam officiis ut ipsam sunt voluptate et facilis. Et sed quibusdam quod non est. Rem omnis voluptatem voluptatem pariatur. Laudantium doloremque molestiae quis quis dolorem dolores alias error.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/716.jpg",
                            IsDeleted = false,
                            Name = "South Bianka",
                            OpeningTime = new DateTime(2024, 11, 24, 9, 38, 28, 651, DateTimeKind.Local).AddTicks(2349),
                            TicketPrice = 94.63m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 5,
                            ClosingTime = new DateTime(2024, 11, 24, 18, 42, 17, 28, DateTimeKind.Local).AddTicks(5640),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(1747),
                            Description = "Et omnis vel qui magni perspiciatis animi excepturi omnis. Illo consequatur nulla illum provident soluta eveniet. Provident dolorem optio natus laborum et.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/458.jpg",
                            IsDeleted = false,
                            Name = "South Kielfort",
                            OpeningTime = new DateTime(2024, 11, 24, 9, 0, 6, 539, DateTimeKind.Local).AddTicks(8480),
                            TicketPrice = 44.59m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ClosingTime = new DateTime(2024, 11, 24, 18, 21, 59, 318, DateTimeKind.Local).AddTicks(682),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(1924),
                            Description = "Facilis blanditiis sit. Unde ipsum et ut accusantium molestias tempora laudantium. Autem aperiam non qui reiciendis.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/169.jpg",
                            IsDeleted = false,
                            Name = "Ashtynville",
                            OpeningTime = new DateTime(2024, 11, 24, 8, 39, 18, 787, DateTimeKind.Local).AddTicks(826),
                            TicketPrice = 17.01m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            ClosingTime = new DateTime(2024, 11, 24, 18, 40, 41, 293, DateTimeKind.Local).AddTicks(4451),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(2062),
                            Description = "Perspiciatis minima aliquid nostrum reprehenderit commodi quas voluptas illum. Totam quasi fugiat voluptatem. Quod maiores id praesentium soluta est consectetur et dolorem. Odit omnis minus autem voluptates hic non ut soluta. Quasi consequatur incidunt voluptatem eos qui reiciendis laboriosam incidunt.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/533.jpg",
                            IsDeleted = false,
                            Name = "Jonesfort",
                            OpeningTime = new DateTime(2024, 11, 24, 9, 9, 21, 521, DateTimeKind.Local).AddTicks(7159),
                            TicketPrice = 68.06m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            ClosingTime = new DateTime(2024, 11, 24, 18, 33, 41, 589, DateTimeKind.Local).AddTicks(5800),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(2256),
                            Description = "Quas adipisci perferendis id dolores vel molestias. Error aut sed est. Esse maxime non.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/975.jpg",
                            IsDeleted = false,
                            Name = "North Schuyler",
                            OpeningTime = new DateTime(2024, 11, 24, 9, 52, 10, 443, DateTimeKind.Local).AddTicks(4604),
                            TicketPrice = 29.46m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            ClosingTime = new DateTime(2024, 11, 24, 18, 37, 6, 7, DateTimeKind.Local).AddTicks(4007),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(2366),
                            Description = "Omnis qui culpa et. Praesentium qui alias eum est vel itaque placeat et ullam. Repellendus nihil deserunt tempora ad quasi nemo et sed nisi.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/112.jpg",
                            IsDeleted = false,
                            Name = "New Zackland",
                            OpeningTime = new DateTime(2024, 11, 24, 8, 12, 51, 377, DateTimeKind.Local).AddTicks(4974),
                            TicketPrice = 40.16m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            ClosingTime = new DateTime(2024, 11, 24, 18, 47, 3, 633, DateTimeKind.Local).AddTicks(2255),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(2689),
                            Description = "Voluptas reprehenderit et. Perferendis voluptatem aut sit omnis. Animi omnis dolor corrupti eos aut nesciunt occaecati. Sunt aut at occaecati natus accusamus molestiae. Exercitationem nobis aut et necessitatibus nobis necessitatibus itaque et.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/181.jpg",
                            IsDeleted = false,
                            Name = "New Kendall",
                            OpeningTime = new DateTime(2024, 11, 24, 9, 48, 59, 338, DateTimeKind.Local).AddTicks(2853),
                            TicketPrice = 84.85m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            ClosingTime = new DateTime(2024, 11, 24, 17, 36, 14, 442, DateTimeKind.Local).AddTicks(9460),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(2978),
                            Description = "Doloremque laborum a voluptas nisi porro quidem ut at. Aut aperiam voluptatibus natus earum. Fugiat blanditiis illo voluptates officiis incidunt aspernatur est. Eveniet velit aut. Placeat qui sed sunt ea.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1102.jpg",
                            IsDeleted = false,
                            Name = "Marilouside",
                            OpeningTime = new DateTime(2024, 11, 24, 8, 24, 22, 672, DateTimeKind.Local).AddTicks(3825),
                            TicketPrice = 36.94m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            ClosingTime = new DateTime(2024, 11, 24, 17, 53, 27, 156, DateTimeKind.Local).AddTicks(563),
                            CreatedDate = new DateTime(2024, 11, 24, 15, 14, 17, 162, DateTimeKind.Local).AddTicks(3128),
                            Description = "Architecto ab et nihil rerum est officia. Dolore id nostrum ut esse cum soluta ipsum ex. Quod voluptatem quis est sint reiciendis dolorem eaque ut. Beatae vel voluptatem quidem omnis nostrum suscipit dicta aliquid. Consectetur in neque reprehenderit tempore voluptatum accusamus omnis qui esse.",
                            ImageData = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/90.jpg",
                            IsDeleted = false,
                            Name = "Hagenesberg",
                            OpeningTime = new DateTime(2024, 11, 24, 8, 51, 3, 667, DateTimeKind.Local).AddTicks(9221),
                            TicketPrice = 42.47m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.DestinationAddress", b =>
                {
                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("DestinationId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("DestinationAddresses");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Destinations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Address", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.DestinationAddress", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Payment", "Payment")
                        .WithMany("Tickets")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Destination", "Tour")
                        .WithMany("Tickets")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourGuide.Domain.Entities.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Payment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
