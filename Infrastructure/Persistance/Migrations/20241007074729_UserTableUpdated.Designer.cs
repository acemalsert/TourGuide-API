// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourGuide.Persistance.Context;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241007074729_UserTableUpdated")]
    partial class UserTableUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Beauty",
                            CreatedDate = new DateTime(2024, 2, 17, 1, 18, 32, 355, DateTimeKind.Local).AddTicks(8074),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Outdoors",
                            CreatedDate = new DateTime(2024, 6, 30, 10, 39, 51, 656, DateTimeKind.Local).AddTicks(575),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Games",
                            CreatedDate = new DateTime(2023, 12, 26, 21, 59, 18, 879, DateTimeKind.Local).AddTicks(9377),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Movies",
                            CreatedDate = new DateTime(2022, 11, 16, 8, 18, 16, 55, DateTimeKind.Local).AddTicks(1799),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Jewelery",
                            CreatedDate = new DateTime(2022, 11, 3, 2, 33, 9, 172, DateTimeKind.Local).AddTicks(5349),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(5939),
                            Description = "Ratione doloremque nostrum optio illum. Repellat et odio harum et consequatur vel et quisquam. Consequuntur et dolorem voluptas numquam et tempora corporis. Repudiandae nesciunt iusto. Asperiores sed molestiae quidem recusandae eum. Nulla non dolorem.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/77.jpg",
                            IsDeleted = false,
                            Latitude = 22.244199999999999,
                            Location = "591 Blanda Centers, East Loraland, Northern Mariana Islands",
                            Longitude = -71.397499999999994,
                            Name = "North Kraigmouth",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 38.88m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(7924),
                            Description = "Odio officia id. Rerum ipsa ea recusandae odio beatae cumque iusto illo. Voluptate itaque eveniet excepturi saepe ratione dolor quia. Et architecto omnis voluptates aut.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1153.jpg",
                            IsDeleted = false,
                            Latitude = 11.8492,
                            Location = "361 Danika Mountains, South Jacky, Bangladesh",
                            Longitude = -91.710499999999996,
                            Name = "North Herbert",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 57.07m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(8249),
                            Description = "Fugit similique quia. Magnam cumque et recusandae et et eum consequatur. Veritatis explicabo aliquam sed voluptatum eaque repudiandae et porro aliquid.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/167.jpg",
                            IsDeleted = false,
                            Latitude = 38.061799999999998,
                            Location = "524 Bradtke Squares, Emersonchester, Brazil",
                            Longitude = 92.732200000000006,
                            Name = "North Bette",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            TicketPrice = 35.07m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(8501),
                            Description = "Ipsum aliquid quo quisquam dolore. Quis possimus alias consequatur dolor. Doloremque delectus aut sit aut consequuntur quod nesciunt nam.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/748.jpg",
                            IsDeleted = false,
                            Latitude = -66.069100000000006,
                            Location = "321 Jazmin Track, Langstad, Liberia",
                            Longitude = 80.420599999999993,
                            Name = "Clementinaberg",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            TicketPrice = 14.69m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            ClosingTime = new TimeSpan(0, 19, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(8693),
                            Description = "Molestias ipsum soluta nisi ut voluptas iste odio fuga laborum. Explicabo dolor qui. Veniam ducimus aliquid quod sed sint. Qui repellendus soluta deserunt fugiat blanditiis.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/9.jpg",
                            IsDeleted = false,
                            Latitude = -77.4328,
                            Location = "8595 Blick Valleys, Padbergburgh, Thailand",
                            Longitude = -56.069800000000001,
                            Name = "New Ron",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 92.91m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(8922),
                            Description = "Aut et enim earum voluptatum sed repellendus vel voluptas voluptatem. Est fugit soluta. Sed dolor expedita deserunt suscipit et optio voluptas doloremque. Illum illo error asperiores praesentium quia.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/996.jpg",
                            IsDeleted = false,
                            Latitude = 33.574100000000001,
                            Location = "634 Luettgen Glens, Soledadmouth, Comoros",
                            Longitude = -11.5678,
                            Name = "Alfordview",
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            TicketPrice = 13.04m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(9119),
                            Description = "In sunt unde amet voluptate quaerat quia rem sed error. Odit repudiandae doloribus assumenda assumenda delectus sit vitae esse nihil. Minima omnis quia natus eos saepe eos. Vero dolor quae in non. Beatae facere tempora facere.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/343.jpg",
                            IsDeleted = false,
                            Latitude = 75.278700000000001,
                            Location = "9853 Toy Wall, West Shayleebury, Swaziland",
                            Longitude = -135.89930000000001,
                            Name = "Lake Gladyce",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 77.86m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(9360),
                            Description = "Et ipsa cupiditate nam sunt est a impedit nemo qui. Pariatur laboriosam omnis odio veritatis nostrum quod iusto eius et. Fuga sit sed odit voluptatem. Vel magnam ex repellendus libero aut laudantium magnam inventore. Omnis deserunt molestiae dolore magni assumenda reiciendis. Ipsum odit minus.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/895.jpg",
                            IsDeleted = false,
                            Latitude = -13.5884,
                            Location = "021 Jaylen Junctions, Grahamtown, French Southern Territories",
                            Longitude = -78.637600000000006,
                            Name = "West Alexandra",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 47.73m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            ClosingTime = new TimeSpan(0, 17, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(9585),
                            Description = "Dolorem nam reprehenderit quae ut est. Beatae deleniti provident eum repellat in. Similique veritatis et cumque quae debitis rem fugit consectetur. Ut dolorem est.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/222.jpg",
                            IsDeleted = false,
                            Latitude = -28.873799999999999,
                            Location = "038 Myrtle Prairie, Beattyland, Latvia",
                            Longitude = 25.433599999999998,
                            Name = "New Norbertochester",
                            OpeningTime = new TimeSpan(0, 8, 0, 0, 0),
                            TicketPrice = 44.26m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedDate = new DateTime(2024, 10, 7, 10, 47, 29, 262, DateTimeKind.Local).AddTicks(9786),
                            Description = "Amet dolorum voluptatem sit dolorem quo. Hic iusto ea similique sit iure. Incidunt maiores totam aut deleniti. Dicta cumque sed quos laborum ut voluptas sapiente omnis architecto. Nihil ipsam sit labore. Ad quidem omnis.",
                            ImageUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1058.jpg",
                            IsDeleted = false,
                            Latitude = 20.013400000000001,
                            Location = "7756 Fadel Track, New Santos, Iran",
                            Longitude = 91.467299999999994,
                            Name = "Shieldstown",
                            OpeningTime = new TimeSpan(0, 10, 0, 0, 0),
                            TicketPrice = 26.68m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TourGuide.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Destination", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Destinations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TourGuide.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Destinations");
                });
#pragma warning restore 612, 618
        }
    }
}
